"""Initial migration

Revision ID: f7a32c1a0b17
Revises:
Create Date: 2024-12-16 14:16:49.336602

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f7a32c1a0b17'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS cohort_management')

    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('user_type', sa.String(), nullable=False),
    sa.Column('disabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='cohort_management'
    )
    op.create_index(op.f('ix_cohort_management_users_email'), 'users', ['email'], unique=True, schema='cohort_management')
    op.create_index(op.f('ix_cohort_management_users_id'), 'users', ['id'], unique=False, schema='cohort_management')
    op.create_table('teachers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['cohort_management.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='cohort_management'
    )
    op.create_table('cohorts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('teacher_id', sa.UUID(), nullable=True),
    sa.Column('level_of_education', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['cohort_management.teachers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='cohort_management'
    )
    op.create_index(op.f('ix_cohort_management_cohorts_id'), 'cohorts', ['id'], unique=False, schema='cohort_management')
    op.create_table('students',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('current_level', sa.Integer(), nullable=True),
    sa.Column('cohort_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['cohort_id'], ['cohort_management.cohorts.id'], ),
    sa.ForeignKeyConstraint(['id'], ['cohort_management.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='cohort_management'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('students', schema='cohort_management')
    op.drop_index(op.f('ix_cohort_management_cohorts_id'), table_name='cohorts', schema='cohort_management')
    op.drop_table('cohorts', schema='cohort_management')
    op.drop_table('teachers', schema='cohort_management')
    op.drop_index(op.f('ix_cohort_management_users_id'), table_name='users', schema='cohort_management')
    op.drop_index(op.f('ix_cohort_management_users_email'), table_name='users', schema='cohort_management')
    op.drop_table('users', schema='cohort_management')
    # ### end Alembic commands ###


    op.execute('DROP SCHEMA IF EXISTS cohort_management CASCADE')
